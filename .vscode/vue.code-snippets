{
    // Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and \${1:label}, \${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    "template": {
        "scope": "vue",
        "prefix": "template",
        "body": [
            "<template>",
            "  $1",
            "</template>"
        ],
        "description": "Create <template> block"
    },
    "script": {
        "scope": "vue",
        "prefix": "script",
        "body": [
            "<script lang=\"ts\">",
            "import { defineComponent } from 'vue';",
            "",
            "export default defineComponent({",
            "  $2",
            "});",
            "</script>"
        ],
        "description": "Create <script> block"
    },
    "script setup": {
        "scope": "vue",
        "prefix": "script setup",
        "body": [
            "<script lang=\"ts\" setup>",
            "defineProps<{ $1 }>();",
            "</script>"
        ],
        "description": "Create <script setup> + <script> blocks"
    },
    "service interface": {
        "scope": "typescript",
        "prefix": "service interface",
        "body": [
            "import { ServiceKey } from './Service'",
            "export interface $1Service {",
            "  $2",
            "}",
            "",
            "export const $1ServiceKey: ServiceKey<$1Service> = '$1Service'"
        ]
    },
    "service impl": {
        "scope": "typescript",
        "prefix": "service impl",
        "body": [
            "import { $1Service as I$1Service, $1ServiceKey } from '@xmcl/runtime-api'",
            "import { LauncherAppKey } from '../app/utils'",
            "import { LauncherApp } from '../app/LauncherApp'",
            "import { Inject } from '../util/objectRegistry'",
            "import { ExposeServiceKey, AbstractService } from './Service'",
            "@ExposeServiceKey($1ServiceKey)",
            "export class $1Service extends AbstractService implements I$1Service {",
            "  constructor(@Inject(LauncherAppKey) app: LauncherApp) {",
            "   super(app)",
            "  }",
            "  $2",
            "}",
            ""
        ]
    }
    // "style": {
    //     "scope": "vue",
    //     "prefix": "style",
    //     "body": [
    //         "<style lang=\"scss\" scoped>",
    //         "$1",
    //         "</style>"
    //     ],
    //     "description": "Create <style> block"
    // },
    // "v-for": {
    //     "scope": "html",
    //     "prefix": "v-for",
    //     "body": [
    //         "<template v-for=\"$1 in $2\">",
    //         "  $3",
    //         "</template>"
    //     ],
    //     "description": "Create html tag with v-for"
    // },
    // "v-if": {
    //     "scope": "html",
    //     "prefix": "v-if",
    //     "body": [
    //         "<template v-if=\"$1\">",
    //         "  $2",
    //         "</template>"
    //     ],
    //     "description": "Create html tag with v-if"
    // },
    // "v-else-if": {
    //     "scope": "html",
    //     "prefix": "v-else-if",
    //     "body": [
    //         "<template v-else-if=\"$1\">",
    //         "  $2",
    //         "</template>"
    //     ],
    //     "description": "Create html tag with v-else-if"
    // },
    // "v-else": {
    //     "scope": "html",
    //     "prefix": "v-else",
    //     "body": [
    //         "<template v-else>",
    //         "  $2",
    //         "</template>"
    //     ],
    //     "description": "Create html tag with v-else"
    // }
    "i18n": {
        "scope": "vue",
        "prefix": "i18n",
        "body": [
            "<i18n locale=\"$1\" lang=\"yaml\">",
            "$2",
            "</i18n>"
        ]
    }
}